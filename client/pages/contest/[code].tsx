import { Box, Container, Fab, Grid, IconButton } from "@mui/material";
import axios from "axios";
import { GetServerSideProps } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useCallback, useEffect, useRef, useState } from "react";
import { useUser } from "../../components/header/header";
import UserIdentify from "../../components/identification/user-identify";
import LoadingScreen from "../../components/loading/loading";
import ContestPaper from "../../components/paper/contest-paper";
import { API_URL } from "../../constants/api";
import { useAuth } from "../../hooks/auth.hook";
import { ContestInterface } from "../../types/contest";
import { FormInterface } from "../../types/form";
import ArrowCircleUpIcon from '@mui/icons-material/ArrowCircleUp';
import { RecordInterface } from "../../types/record";

interface ContestPageProps {
    code: string
}

function ContestPage({ code }: ContestPageProps) {
    const [contest, setContest] = useState<ContestInterface | undefined>()
    const [pos, setPos] = useState(false);

    const ref = useRef<any>();

    const { accessToken } = useAuth()
    const { user, isLoading } = useUser(accessToken)
    const router = useRouter()

    useEffect(() => {
        (async () => {
            try {
                if (!accessToken || contest) return;

                const { data } = await axios.get<ContestInterface>(API_URL + '/contest/start/' + code, { headers: { Authorization: `Bearer ${accessToken}` } })

                if (data) {
                    setContest(data)
                }
            } catch (error) {
                router.push('/main')
            }
        })()
    }, [accessToken])

    useEffect(() => {
        if (!ref.current) return;

        const temp = ref.current
        temp.addEventListener("scroll", handleScroll);
        return () => temp.removeEventListener("scroll", handleScroll);
    });

    // Handler
    const handleTop = () => {
        ref.current.scrollTop = 0;
        setPos(false);
    };

    const handleScroll = () => {
        if (ref.current.scrollTop > 50) {

            if (!pos) setPos(true);
        } else {
            if (pos) setPos(false);
        }
    };

    // JSX renderer

    if (!user || isLoading || !contest) {
        return <LoadingScreen />
    }

    return (
        <>
            <Head>
                <title>Contest Page</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div style={{ backgroundColor: "#ede7f6", overflowY: 'scroll', height: '100vh', scrollBehavior: 'smooth' }} ref={ref}>
                <ContestPaper
                    form={contest.form}
                    contest={contest}
                />
                <Fab color="secondary" aria-label="edit"
                    style={{
                        position: "fixed",
                        bottom: 25,
                        right: 25,
                        display: pos ? "flex" : "none"
                    }}
                    onClick={handleTop}
                >
                    <ArrowCircleUpIcon />
                </Fab>
            </div>
        </>
    );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
    try {
        const { code } = context.params as any
        return {
            props: {
                code
            }
        }
    } catch (error) {
        return {
            redirect: {
                destination: '/main',
                permanent: false
            }
        }
    }
}

export default ContestPage;